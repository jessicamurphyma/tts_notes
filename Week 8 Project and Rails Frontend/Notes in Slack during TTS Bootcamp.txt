Additional Information from Jared and peers:

#my TTS blog post:

http://techtalentsouth.com/student-blog/a-step-back-to-leap-forward/


#general


HTTP methods tutorial on how to use them for RESTful API or Web Service.
http://www.restapitutorial.com/lessons/httpmethods.html

Git Branching - Basic Branching and Merging
https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging

A tutorial on how to make your own website right from your computer. All you need is Notepad!http://www.2createawebsite.com/build/build-html-website.html


#phx


Extra Learning Links

http://learnrubythehardway.org/book/

https://www.railstutorial.org/

http://www.restapitutorial.com/lessons/whatisrest.html#

https://tts-phx.slack.com/files/jdgray/F0NHVNHED/git-cheat-sheet-medium.png

https://rubymonk.com/learning/books/1-ruby-primer/chapters/1-arrays/lessons/2-arrays-introduction

http://ruby-doc.org/core-2.2.0/Class.html

https://github.com/jd-gray/TTS.git

http://stackoverflow.com/questions/26581619/rubys-operator-and-sort-method

http://stackoverflow.com/questions/9586989/difference-between-map-and-each

https://developer.mozilla.org/en-US/docs/Web/HTML/Element

http://sql.learncodethehardway.org/book/

http://guides.rubyonrails.org/active_record_basics.html

http://guides.rubyonrails.org/association_basics.html

https://www.codefellows.org/blog/three-battle-tested-ways-to-install-postgresql



Homework

https://try.github.io/levels/1/challenges/1

HW 2/29/16: Review Slides cover from Mondays class, Learn Ruby the Hard Way Exercises 32-34 and 38

HW Due by Monday: 1) Define what a Ruby Proc is and give an example (not from the slides) 2) Build about me HTML page. Make links to Social Media with Social Media Icons - Optional, but recommended: CodeSchool - HTML, Ruby, and JS & any class activities from Wednesday’s slides

https://www.youtube.com/watch?v=7_u-ClYsgdI



More Helpful Links

http://rogerdudler.github.io/git-guide/

https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf

https://packagecontrol.io/

http://gitref.org/remotes/

Companies that use Ruby
http://webdevphoenix.com/ruby/

http://www.codenewbie.org/

https://twitter.com/saronyitbarek
  Founder @CodeNewbies. Managing #TechJobsAcademy at @MicrosoftNY. Work hard and gaf. NYC

GDI:
https://www.linkedin.com/groups/6961126/profile

Phx Developer Education:
http://meetu.ps/e/BmVC2/gwYzP/d

Slack for Phx Developers

Scottsdale Technology Startups
http://www.meetup.com/Scottsdale-Technology-Startups-Meetup/

Rejection as Motivation
http://elitedaily.com/money/entrepreneurship/airbnb-cofounder-proves-rejection-should-be-motivation/1109092/

http://www.flaticon.com/

http://www.flatuicolorpicker.com/

http://devicon.fr/

https://www.google.com/fonts#

http://getbootstrap.com/css/

https://fortawesome.github.io/Font-Awesome/

https://jungle-temple.herokuapp.com/

Jon Skeet (#1 stackoverflow member and google software engineer)
https://www.youtube.com/watch?v=jGUoF-uByGg

Ed Roman
https://www.youtube.com/channel/UC4cQofuQfO-Z_44abUy13Dg

creator of Ruby on Rails, David Heinemeier Hansson
https://www.youtube.com/watch?v=99LBwJnFDE8

https://www.youtube.com/watch?v=99LBwJnFDE8

http://railscasts.com/

Mackenzie Child
https://www.youtube.com/user/mackenziechild/playlists
https://www.youtube.com/channel/UCIQmhQxCvLHRr3Beku77tww

GoRails
https://www.youtube.com/channel/UCIQmhQxCvLHRr3Beku77tww

http://getbootstrap.com/css/#tables

https://github.com/twbs/bootstrap-sass

https://github.com/plataformatec/devise




Code:

*RPS

puts "Rock, paper, or scissors?"

computer = ["rock", "paper", "scissors"]


*Fizzbuzz.rb

for i in 1..100
  if (i % 3 == 0) && (i % 5 == 0) 
    puts "FizzBuzz"
  elsif i % 3 == 0
    puts "Fizz"
  elsif i % 5 == 0
    puts "Buzz"
  else
    puts i
  end
end


*Map

def square_stuff(items)
  p items.map { |i| i * i }
  p items
end

numbers = [1,2,3,4]

square_stuff(numbers)

Example Each

def array(items)
  items.each do |i|
    p i
  end
end


*shortcuts.rb

array = [:joe, :alice, :bob, :frank]

array.map! { |s| s.to_s }

array.map! { |s| s.capitalize }

array.sort!

p array


*divisible

# Write a function which takes two arguments
# and returns all number, which are divisible 
# by given divisor. First argument is array of numbers 
# and the second is divisor.


def divisible(array, number)
  new_array = []

  array.each do |i|
    if i % number == 0
      new_array.push(i)
    end
  end
  new_array
end

p divisible([1,2,3,4,5,6,7], 2)

*# Define a method with one argument - number
# Check if that number is even or not
# Display the result

def number(x)
x % 2 == 0 ? puts("you are even") : puts ("you are odd")
end
#   if x % 2 ==0
#     puts "You are even"
#   else
#     puts "You are odd"
#   end
# end

# number(2)
# number(3)

*HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link type="text/css" rel="stylesheet" href="styles.css"/>

    <title>Jared's Page</title>
</head>
<body>
    <p>Hello World</p>
</body>
</html>

*Bootstrap

<!DOCTYPE html>
<html>
<head>    
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Latest compiled and minified CSS -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">    
</head>

<body>
  <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
  <!-- Include all compiled plugins (below), or include individual files as needed -->
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
</body>
</html>

 *More Bootstrap

<div class="container features">
    <div class="row">
        
        <div class="col-xs-12 col-sm-4">
            <img class="img-responsive" src="http://upload.wikimedia.org/wikipedia/commons/3/3f/Coffee_Beans.jpg">
          <p> The freshest locally sourced coffee. Organic and Fair Trade certified</p> 
      </div>
        
      <div class="col-xs-12 col-sm-4">
          <img class="img-responsive" src="http://pixabay.com/static/uploads/photo/2014/07/15/13/36/coffee-shop-393954_640.jpg">
          <p> A perfect environment to meet with a friend or be alone and get work done.</p>
      </div>

      <div class="col-xs-12 col-sm-4">
          <img class="img-responsive" src="http://pixabay.com/static/uploads/photo/2013/11/05/23/55/coffee-206142_640.jpg">
          <p> Quality hand-crafted espresso shots pulled with the greatest of care.</p>
      </div>

    </div>
</div>


*More bootstrap

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">
  
*Correcting my 99 btls in JavaScript

var bottles = 99

for (bottles; bottles >= 0; bottles --) {
 if (bottles >= 0) {
   console.log(Number(bottles) - 1 + " bottles of beer on the wall.")
 }
 else {
   console.log("No more bottles of beer on the wall, no more bottle of beer, none to take down, none to pass around, no more bottles of beer on the wall!")
 }

}


*HTML

<p class="notice"><%= notice %></p>
<p class="alert"><%= alert %></p>

*Before Action

before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.for(:sign_up) { |u| u.permit({ roles: [] }, :email, :password, :password_confirmation, 
      :name, :username, :bio, :location) }
    devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:email, :password, :password_confirmation, 
      :current_password, :name, :username, :bio, :location) }
  end


*HTML 

 <div class="field">
    <%= f.text_field :name, autofocus: true, placeholder: "First and Last Name" %>
  </div><br />

  <div class="field">
    <%= f.text_field :username, placeholder: "@Username" %>
  </div><br />

  <div class="field">
    <%= f.text_field :location, placeholder: "Charlotte, North Carolina" %>
  </div><br />


  <div class="field">
    <%= f.text_field :bio, placeholder: "Your Bio here." %>
  </div>

*For New Tweet

<h1>New Tweet</h1>

<%= form_for(@tweet) do |f| %>
<% if @tweet.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@tweet.errors.count, "error") %> prohibited this tweet from being saved:</h2>

      <ul>
        <% @tweet.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :message %><br>
    <%= f.text_field :message %>
  </div>
  <div class="field">
    <%= f.label :user_id %><br>
    <%= f.text_field :user_id, value: current_user.id %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>

<%= link_to 'Back', tweets_path %>

*HTML

<p>
  <strong>Message:</strong>
  <%= @tweet.message %>
</p>

<p>
  <strong>User:</strong>
  <%= @tweet.user.username %>
</p>

<%= link_to 'Edit', edit_tweet_path(@tweet) %> |
<%= link_to 'Back', tweets_path %>

*More HTML

h1>Whatever, this is just a header</h1>

<table>
  <thead>
    <tr>
      <th>Message</th>
      <th>User</th>
      <th colspan="3"></th>
    </tr>
  </thead>
  <tbody>
    <% @tweets.each do |x| %>
      <tr>
        <td><%= x.message %></td>
        <td><%= x.user.username %></td>
        <td><%= link_to 'Show', x %></td>
        <td><%= link_to 'Edit', edit_tweet_path(x) %></td>
        <td><%= link_to 'Destroy', x, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>
<br>
<%= link_to 'New Tweet', new_tweet_path %>

*Even More HTML

 respond_to do |format|
        if @tweet.update(tweet_params)
          format.html { redirect_to @tweet, notice: 'Post was successfully updated.' }
      else
        format.html { render :edit }

      end
    end

*Another HTML 

def destroy
      @tweet.destroy
    respond_to do |format|
      format.html { redirect_to tweets_url, notice: 'Tweet was successfully destroyed.' }
    end
  end

*More HTML

<%= link_to "Sign Out", destroy_user_session_path, 
method: :delete, class: "btn btn-danger”%>

*In gems

group :development do
  gem 'sqlite3'
end

group :production do
  gem 'pg'
  gem 'rails_12factor'
end

*For Postgresql
connection: &connection
  adapter: postgresql
  encoding: unicode
  pool: 5
  username: username
  password: 

*Github commands:
git checkout -b “create branch here”
git status
git add . 
git commit -m “added something”
git push origin Claudia-branch

github

new pull request
create pull request
merge pull request
confirm merge

rails g model restaurant name address website description:text user:references

git branch -d claudia-branch (delete)

git branch -D claudia-branch (force delete with capital D)


Heroku

Heroku login
git push heroku master
Heroku logs



#random

Yelp on Ruby
http://engineeringblog.yelp.com/2014/04/more-yelp-in-your-ruby.html

Movie Review App

https://www.youtube.com/watch?v=0DR5JLZ2Qgg


Gems we considered:

https://rubygems.org/gems/ajaxful_rating

https://rubygems.org/gems/star_ratings

https://rubygems.org/gems/spree_reviews

https://rubygems.org/gems/blog

https://rubygems.org/gems/restaurant/versions/0.1.4

https://rubygems.org/gems/map

https://github.com/sjaveed/acts_as_nps_rateable

https://github.com/plataformatec/devise

http://www.sitepoint.com/ratyrate-add-rating-rails-app/
  https://github.com/wazery/ratyrate

https://github.com/twbs/bootstrap-sass

https://github.com/plataformatec/devise

https://github.com/thoughtbot/paperclip


What to do from here on Class Project app:

1. add validations on model level  required fields

2. ability to deleate a review

3. make it so the user that created the reviewer restaurant can deleate it

  right now anyone can delete anyones reviews

4. photos for the restaurants and for users

  like an avaatar/profile pic

5. styling fix links give it back ground. font layout

  use css styling

6. have a search button

7. automated testing

  delete some duplicate buttons

8. if user signed in do not display sign up button

9. add logo

  logo in place of ruby foodie in the corner

10. think about the user experience

11. user has a user name

  not just email

12. look up continuous integration or CI. integrate this with circle CI   IF all tests are successful then it deploys
